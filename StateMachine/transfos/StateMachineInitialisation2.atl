-- @path MM=/StateMachine/metaModels/StateMachine.ecore

----------------------------------------------------------------------------------------------------------
-- Fait un pas d'avancement pour l'evenement accelerer depuis l'etat par initial pour le model Voiture.xmi
----------------------------------------------------------------------------------------------------------

module StateMachineInitialisation2;
create result : MM from model : MM;

---------- HELPER ----------------

helper context MM!ExpressionElement def: isIntegerCalculusOperator(op: MM!Operator) : Boolean = 
	op = #add or op = #sub or op = #Div or op = #mul;

helper context MM!ExpressionElement def: isIntegerComparatorOperator(op : MM!Operator) : Boolean = 
	op = #gt or op = #lt or op = #lte or 
	op = #gte or op = #eq or op = #neq;

helper context MM!ExpressionElement def: isBooleanOperator(op : MM!Operator) : Boolean = 
	op = #eq or op = #neq or op = #And or 
	op = #Or or op = #Not;

helper context MM!ExpressionElement def: isInteger() : Boolean = 
	self.oclIsTypeOf(MM!IntegerData) or 
	self.oclIsTypeOf(MM!IntegerVariable);

helper context MM!ExpressionElement def: isBoolean() : Boolean = 
	self.oclIsTypeOf(MM!BooleanData) or 
	self.oclIsTypeOf(MM!BooleanVariable);

helper context MM!ExpressionElement def: isBooleanExpression() : Boolean =
	if self.oclIsTypeOf(MM!Expression) then
		self.isIntegerComparatorOperator(self.operator) or
		self.isBooleanOperator(self.operator)
	else
		self.isBoolean()
	endif;

helper context MM!ExpressionElement def: isIntegerExpression() : Boolean =
	if self.oclIsTypeOf(MM!Expression) then
		self.isIntegerCalculusOperator(self.operator)
	else
		self.isInteger()
	endif;

helper context MM!ExpressionElement def: computeBooleanExpression() : Boolean =
	if self.oclIsTypeOf(MM!BooleanData) then
		self.value
	else if  self.oclIsTypeOf(MM!BooleanVariable) then
		self.value.value
	else if self.oclIsTypeOf(MM!VariableReference) then
		self.variable.value.value
	else if self.operator = #gt then
		self.left.computeIntegerExpression() > self.right.computeIntegerExpression()
	else if self.operator = #lt then
		self.left.computeIntegerExpression() < self.right.computeIntegerExpression()
	else if self.operator = #gte then
		self.left.computeIntegerExpression() >= self.right.computeIntegerExpression()
	else if self.operator = #lte then
		self.left.computeIntegerExpression() <= self.right.computeIntegerExpression()
	else if self.operator = #eq then
		if self.left.isBoolean() then
			self.left.computeBooleanExpression() = self.right.computeBooleanExpression()
		else
			self.left.computeIntegerExpression() = self.right.computeIntegerExpression()
		endif
	else if self.operator = #neq then
		self.left.computeIntegerExpression() <> self.right.computeIntegerExpression()
	else if self.operator = #Or then
		self.left.computeBooleanExpression() or self.right.computeBooleanExpression()
	else if self.operator = #And then
		self.left.computeBooleanExpression() >= self.right.computeBooleanExpression()
	else 
		not self.left.computeBooleanExpression()
	endif
	endif
	endif
	endif
	endif
	endif
	endif
	endif
	endif
	endif
	endif;
	
helper context MM!ExpressionElement def: computeIntegerExpression() : Integer = 
	if self.oclIsTypeOf(MM!IntegerData) then
		self.value
	else if self.oclIsTypeOf(MM!IntegerVariable) then
		self.value.value
	else if self.oclIsTypeOf(MM!VariableReference) then
		self.variable.value.value
	else if self.operator = #add then
		self.left.computeIntegerExpression() + self.right.computeIntegerExpression()
	else if self.operator = #sub then
		self.left.computeIntegerExpression() - self.right.computeIntegerExpression()
	else if self.operator = #mul then
		self.left.computeIntegerExpression() * self.right.computeIntegerExpression()
	else
		self.left.computeIntegerExpression() / self.right.computeIntegerExpression()
	endif
	endif
	endif
	endif
	endif
	endif;

---------- STATEMACHINE ----------

rule duplicateStateMachine { 
from
	 sourceStateMachine : MM!StateMachine
to
	 targetStateMachine : MM!StateMachine(
	 	 name <- sourceStateMachine.name,
	 	 container <- sourceStateMachine.container,
	 	 isActive <- true,
	 	 operation <- sourceStateMachine.operation,
	 	 states <- sourceStateMachine.states,
	 	 initialState <- sourceStateMachine.initialState,
	 	 transitions <- sourceStateMachine.transitions,
	 	 events <- sourceStateMachine.events,
	 	 variables <- sourceStateMachine.variables
	 )
do {
	sourceStateMachine.initialState.referencedState.isActive <- true;
}
} 


---------- STATE ----------

rule duplicateState { 
from
	 sourceState : MM!State (sourceState.oclIsTypeOf(MM!State))
to
	 targetState : MM!State(
	 	 name <- sourceState.name,
	 	 container <- sourceState.container,
	 	 isActive <- sourceState.isActive,
	 	 operation <- sourceState.operation
	 )
} 

---------- COMPOSITESTATE ----------

rule duplicateCompositeState { 
from
	 sourceCompositeState : MM!CompositeState (sourceCompositeState.oclIsTypeOf(MM!CompositeState))
to
	 targetCompositeState : MM!CompositeState(
	 	 name <- sourceCompositeState.name,
	 	 container <- sourceCompositeState.container,
	 	 isActive <- sourceCompositeState.isActive,
	 	 operation <- sourceCompositeState.operation,
	 	 states <- sourceCompositeState.states,
	 	 initialState <- sourceCompositeState.initialState
	 )
} 


---------- INITIALSTATE ----------

rule duplicateInitialState { 
from
	 sourceInitialState : MM!InitialState
to
	 targetInitialState : MM!InitialState(
	 	 referencedState <- sourceInitialState.referencedState
	 )
} 


---------- TRANSITION ----------

rule duplicateTransition { 
from
	 sourceTransition : MM!Transition
to
	 targetTransition : MM!Transition(
	 	 source <- sourceTransition.source,
	 	 target <- sourceTransition.target,
	 	 event <- sourceTransition.event,
	 	 guard <- sourceTransition.guard
	 )
} 

---------- EVENT ----------

rule duplicateEvent { 
from
	 sourceEvent : MM!Event
to
	 targetEvent : MM!Event(
	 	 name <- sourceEvent.name
	 )
} 


---------- EXPRESSION ----------

rule duplicateExpression { 
from
	 sourceExpression : MM!Expression
to
	 targetExpression : MM!Expression(
	 	 left <- sourceExpression.left,
	 	 right <- sourceExpression.right,
	 	 operator <- sourceExpression.operator,
	 	 _name <- sourceExpression._name
	 )
} 


---------- BOOLEANDATA ----------

rule duplicateBooleanData { 
from
	 sourceBooleanData : MM!BooleanData
to
	 targetBooleanData : MM!BooleanData(
	 	 value <- sourceBooleanData.value
	 )
} 


---------- INTEGERDATA ----------

rule duplicateIntegerData { 
from
	 sourceIntegerData : MM!IntegerData
to
	 targetIntegerData : MM!IntegerData(
	 	 value <- sourceIntegerData.value
	 )
} 


---------- BOOLEANVARIABLE ----------

rule duplicateBooleanVariable { 
from
	 sourceBooleanVariable : MM!BooleanVariable
to
	 targetBooleanVariable : MM!BooleanVariable(
	 	 value <- sourceBooleanVariable.value,
	 	 name <- sourceBooleanVariable.name
	 )
do {
	for (s in MM!State.allInstances()) {
		if (s.isActive and not s.operation.oclIsUndefined()) {
			for (a in s.operation.contents) {
				if (a.variable.name = sourceBooleanVariable.name) {
					if (targetBooleanVariable.value.oclIsUndefined()) {
							targetBooleanVariable.value <- MM!BooleanData.newInstance();
					}
					targetBooleanVariable.value.value <- a.expression.computeBooleanExpression();
					('BooleanVariable : ' + sourceBooleanVariable.name + ' set as ' + targetBooleanVariable.value.value).println();
				}
			}
		}
	}
}
} 


---------- INTEGERVARIABLE ----------

rule duplicateIntegerVariable { 
from
	 sourceIntegerVariable : MM!IntegerVariable
to
	 targetIntegerVariable : MM!IntegerVariable(
	 	 value <- sourceIntegerVariable.value,
	 	 name <- sourceIntegerVariable.name
	 )
do {
	for (s in MM!State.allInstances()) {
		if (s.isActive and not s.operation.oclIsUndefined()) {
			for (a in s.operation.contents) {
				if (a.variable.name = sourceIntegerVariable.name) {
					if (targetIntegerVariable.value.oclIsUndefined()) {
							targetIntegerVariable.value <- MM!IntegerData.newInstance();
					}
					targetIntegerVariable.value.value <- a.expression.computeIntegerExpression();
					('IntegerVariable : ' + sourceIntegerVariable.name + ' set as ' + targetIntegerVariable.value.value).println();
				}
			}
		}
	}
}
} 


---------- OPERATION ----------

rule duplicateOperation { 
from
	 sourceOperation : MM!Operation
to
	 targetOperation : MM!Operation(
	 	 contents <- sourceOperation.contents,
		 name <- sourceOperation.name
	 )
} 

---------- unactive ASSIGNMENT ----------

rule duplicateAssignment { 
from
	 sourceAssignment : MM!Assignment 
to
	 targetAssignment : MM!Assignment(
	 	 expression <- sourceAssignment.expression,
	 	 variable <- sourceAssignment.variable,
	 	 _name <- sourceAssignment._name
	 )
} 


---------- VARIABLEREFERENCE ----------

rule duplicateVariableReference { 
from
	 sourceVariableReference : MM!VariableReference
to
	 targetVariableReference : MM!VariableReference(
	 	 variable <- sourceVariableReference.variable,
	 	 _name <- sourceVariableReference._name
	 )
} 



